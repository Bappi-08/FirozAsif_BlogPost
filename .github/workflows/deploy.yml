name: Docker Image CI for GHCR

on:
  push:
    branches: [ "main" ]  # Trigger when pushing to the 'main' branch
  pull_request:
    branches: [ "main" ]  # Trigger when a pull request targets 'main'

env:
  REGISTRY: ghcr.io  # Set registry to GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }}  # Use the repository name dynamically for the image name

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest  # Use Ubuntu runner for this job

    permissions:
      contents: read  # Read access to repository contents
      packages: write  # Write access to GitHub Packages (for pushing Docker images)

    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io  # GitHub Container Registry URL
          username: ${{ github.actor }}  # GitHub actor (username)
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHub Token for authentication

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.0  # Latest stable version
        with:
          version: latest  # Optionally specify the version as 'latest'

      # Step 4: Extract Docker image metadata (tags and labels)
      - name: Extract metadata (tags, labels) for Docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}  # Image name for the Docker image in GHCR
          tags: |
            type=ref,event=branch  # Tag based on branch name (e.g., 'main', 'feature-branch')
            type=ref,event=pr  # Tag for pull requests
            type=semver,pattern={{version}}  # Optional: Tag for semantic versioning
            type=raw,value=latest  # Always tag as 'latest'

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # Use current directory as the build context
          push: true  # Push the image to GHCR
          tags: ${{ steps.meta.outputs.tags }}  # Use the tags generated from metadata-action
          labels: ${{ steps.meta.outputs.labels }}  # Use the labels generated from metadata-action

  # Optional Kubernetes deployment step
  # deploy:
  #   needs: build-and-push-image
  #   runs-on: self-hosted
  #   steps:
  #     - name: Deploy to Kubernetes
  #       run: |
  #         kubectl apply -f deployment.yaml
  #       env:
  #         KUBECONFIG: ${{ secrets.KUBE_CONFIG }}
